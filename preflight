#!/bin/sh

## pre-flight for OpenInlets
# use directly (and/or call from a git hook).

# Redirect output to stderr.
exec 1>&2
REPOHOME="$(pwd | sed -E "s|^$HOME|~|")"
underline=$(tput smul) ; nounderline=$(tput rmul)
bold=$(tput bold) ; normal=$(tput sgr0)

echo

## check preflight (this file)
echo '  checking preflight'
if hash shellcheck >/dev/null 2>&1 ; then
  shellcheck -s bash -o add-default-case -o avoid-nullary-conditions -o check-unassigned-uppercase -o deprecate-which preflight \
    || { echo '    *** ERROR in preflight script- check failed.' ; exit 1 ; }
  echo '    preflight: bash script OK'
else
  echo '    --- shellcheck not found: skipping check of preflight script.'
fi
echo

## check pre-push
echo '  checking pre-push'
if hash shellcheck >/dev/null 2>&1 ; then
  shellcheck -s sh -o add-default-case -o avoid-nullary-conditions -o check-unassigned-uppercase -o deprecate-which pre-push || \
    { echo '    *** ERROR in pre-push git hook- check failed.' ; exit 1 ; }
  if ! diff -bq ./pre-push .git/hooks/pre-push ; then
  	echo '    *** ERROR ./pre-push and active .git/hooks/pre-push differ - check failed.'
		echo "        Try ${bold}${underline}kaleidoscope://diff?ROOT=${REPOHOME}/pre-push&REPO=${REPOHOME}/.git/hooks/pre-push&label=PRE-PUSH%20differs${nounderline}${normal}"
		echo '        or: cp -fpv pre-push .git/hooks'
		echo
  	exit 1
  fi
  echo '    preflight: pre-push git OK'
else
  echo '    --- shellcheck not found: skipping check of pre-push got hook.'
fi
echo

## check for node_modules to verify devDependencies are installed
echo "  checking if devDependencies needed for eslint are installed…"
if [ -d "node_modules/eslint" ] ; then
	echo '    node_modules/eslint: found'
else
	echo '    running npm clean-install …'
	npm clean-install || { echo '    *** ERROR npm clean-install failed.'
		echo '        try: npm install && npm audit fix && ./preflight'
		exit 1 ; }
fi
echo

## check YAML
echo "  checking YAML files (w/ yamllint, see .github/linters/.yaml-lint.yml)"
if hash yamllint >/dev/null 2>&1 ; then
  yamllint -c .github/linters/.yaml-lint.yml .github/ \
    || { echo '    *** ERROR yamllint YAML check failed.' ; exit 1 ; }
  echo '    .github/: YAML OK'
else
  echo '    --- yamllint not installed: skipping yamllint YAML checks'
fi
echo

## check README.md
echo '  checking README.md'
[ -d 'node_modules/markdownlint' ] || npm install --no-save markdownlint-cli
npx markdownlint -c .github/linters/.markdownlint.json "*.md" \
  || { echo '    *** ERROR markdownlint *.md check failed.' ; exit 1 ; }
if hash cspell >/dev/null 2>&1 ; then
  printf '  '
	cspell ./*.md LICENSE || \
		{ echo '    *** ERROR "cspell *.md LICENSE" failed.' ; exit 1 ; }
fi
echo '    *.md: Markdown OK'
echo

## check .github/workflows
echo '  checking GitHub Actions'
if hash actionlint >/dev/null 2>&1 ; then
  actionlint -config-file .github/linters/actionlint.yaml .github/workflows/*.yml \
    || { echo '    *** ERROR actionlint .github/workflows/*.yml check failed.' ; exit 1 ; }
  echo '    .github/workflows/*.yml: GitHub Actions .yml OK'
else
  echo '    --- actionlint not installed: skipping GitHub Action checks'
fi
echo

## check JavaScript
echo '  checking JavaScript w/ eslint, see .github/linters/eslint.config.js'
npx eslint -c .github/linters/eslint.config.js "*.js" "src/*.js" ".github/linters/*.js" \
    || { echo '    *** ERROR eslint JavaScript & JSON check failed.' ; exit 1 ; }
if hash cspell >/dev/null 2>&1 ; then
  printf '  '
	cspell src/*.js || \
		{ echo '    *** ERROR "cspell src/*.js" failed.' ; exit 1 ; }
fi
echo '    *.js src/*.js .github/linters/*.js: JavaScript OK'
echo

echo '  OK, preflight checks passed.'
